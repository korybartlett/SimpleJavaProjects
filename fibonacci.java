/**
 * 
 */

/**
 * @author Kory
 *
 *Problem: 
 *Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class fibonacci {

	/**
	 * @param sequence in fib
	 * @return fibValue 
	 */
	public static int fib(int fib){
		if(fib <= 1)
			return fib;
		else{
			return fib(fib - 1) + fib(fib -2);
		}
	}
	
	public static void main(String[] args) {
		//recursion version of fib
		int fibRec = 0;
		int fibRecTotal = 0;
		int counter=0;
		while(fibRec < 4000000){
			fibRec = fib(counter);//save Fibonacci value for comparison so that it is under 4000000
			//using bit operation to check if last digit is 1
			//if even, result will be 0; if odd, result will be 1
			if((fibRec & 1) == 0){
				fibRecTotal += fibRec;
			}
			
			counter++;
		}
		System.out.println("Result from recursion: "+ fibRecTotal);
		
		//iteration version of fib
		int fibIndex = 2;
		int fibCurr = 1;
		int fibPrev = 1;
		int fibTotal = 0;
		while(fibIndex < 4000000){
			if(fibIndex % 2 == 0){
				fibTotal += fibIndex;
			}
			//save current fib number for later
			fibCurr = fibIndex;
			//create next fib number in sequence
			fibIndex = fibCurr + fibPrev;
			//uses saved value as previous number in fib sequence
			fibPrev = fibCurr;
		}
		//total is 4613732
		System.out.println("Result from iteration: "+ fibTotal); 
	}

}
